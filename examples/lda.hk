## Latent Dirichlet Allocation
def dirichlet(as array(prob)):
    xs <~ plate i of int2nat(size(as)-1):
            beta(summate j from i+1 to size(as): as[j],
                 as[i])
    return array i of size(as):
             x = product j from 0 to i: xs[j]
             x * if i+1==size(as): 1 else: real2prob(1-xs[i])

K = 2 # number of topics
M = 3 # number of docs
V = 7 # size of vocabulary

# number of words in each document
doc = [4, 5, 3]

topic_prior = array _ of K: 1.0
word_prior  = array _ of V: 1.0

phi <~ plate _ of K:     # word dist for topic k
         dirichlet(word_prior)

# likelihood
z   <~ plate m of M:
         theta <~ dirichlet(topic_prior)
         plate _ of doc[m]: # topic marker for word n in doc m
           categorical(theta)

w   <~ plate m of M: # for doc m
         plate n of doc[m]: # for word n in doc m
           categorical(phi[z[m][n]])

return (w, z)
